C 的令牌(Token)
  即关键字,标识符,常量,字符串值或一个符号

部分关键字及其解释   
  auto          声明自动变量,根据变量的初始值确定变量类型
  break         跳出循环
  case          开关语句分支
  const         定义常量,被修饰的变量的值初始化后无法改变(只读)
  default       开关语句中的"其它"分支
  enum          声明枚举类型
  extern        声明变量或函数是在其它文件或文本文件的其它位置定义
  goto          无条件跳转语句
  register      声明寄存器变量
  signed        声明有符号类型变量或函数
  sizeof        计算数据类型或变量长度(即所占字节数)
  struct        声明结构体类型
  typedef       用以给数据类型取别名
  unsigned      声明无符号类型变量或函数
  union         声明共用体类型
  volatile      说明变量在程序执行中可被隐含地改变
  _Bool         布尔类型; C++ 中关键字为 bool ,且需要增加头文件 stdbool.h
  _Complex      复数类型;
                一共有三种复数类型:
                  float _Complex
                  double _Complex
                  long _Complex
                对于 float _Complex ,它包含两个 float 类型的值:实部,虚部
                需要增加头文件 cpmplex.h
  _Imaginary    虚数类型
                一共有三种复数类型:
                  float _Imaginary
                  double _Imaginary
                  long _Imaginary
                用 I 表示虚数单位 i
  inline        内联函数(函数被频繁调用,不断有函数入栈,造成栈空间被大量消耗)

C 数据类型
  基本类型
    算术类型:整数类型,浮点类型
      整数类型(实际存储大小以系统位数有关,以下仅供参考,可使用 sizeof 获取)
        类型               存储大小(字节)     值范围
        char               1                 -127~127或0~255
        unsigned char      1                 0~255
        signed char        1                 -128~127
        int                2或4              -(2^15)~2^15-1或-(2^31)~2^31-1
        unsigned int       2或4              0~2^16或0~2^32
        short              2                 -(2^15)~2^15-1
        unsigned short     2                 0~2^16-1
        long               4                 -(2^31)~2^31-1
        unsigned long      4                 0~2^32
      浮点类型
        类型               存储大小(字节)     值范围                    精度
        float              4                 1.2E-38~3.4E+38          6位小数
        double             8                 2.3E-308~1.7E+308        15位小数
        long double        16                3.4E-4932~1.1E+4932      19位小数
  枚举类型
    同为算数类型,被用来定义在程序中只能赋予其一定的离散整数值的变量
  void 类型
    指定没有可用的值,通常用于以下三种情况
      函数返回为空
        (略)
      函数参数为空
        不带参数的函数可以接受一个 void,例如 int rand(void);
      指针指向 void
        类型为 void * 的指针代表对象的地址,而不是类型
        例如内存分配函数 void *malloc(size_t size); 返回指向 void 的指针可以转换为任何数据类型
  派生类型
    包括指针类型,数组类型,结构类型,共用体类型和函数类型

关于浮点类型的值范围和精度
  以 float 为例,4字节即 32bit
  第一位为符号位,第2至9位为指数部分,剩下的23位为尾数部分
  指数范围为-(2^8)~2^8
  尾数范围0~2^23,假设转换成十进制则为0~8388608(不要被误导,这里是假设,重点是精度),故精度为6位
  而 double 双精度浮点值第一位为符号,第2至12位为指数位,剩下52位为尾数位

**********

C 变量
  程序可操作的存储区的名称
  C 中的每个变量都有特定的类型,类型决定了变量存储的大小和布局
  范围内的值都可以存储在内存中,运算符可应用于变量上
  变量命名格式:下划线/字母开头+下划线/字母/数字,大小写敏感

不带初始化的定义
  带有静态存储持续时间的变量会被隐式初始化为 NULL (所有字节的值都是0)
  其它所有变量的初始值是未定义的

变量声明的两种情况
  1.需要建立存储空间,如 int a; 在声明时就已经建立了存储空间
  2.另一种是不需要创建空间,通过使用 extern 关键字声明变量名而不定义它,例如 extern int a; 
    其中变量 a 可以在别的文件中定义,即使用 extern 关键字非变量的定义

C 中的左值(Lvalues)和右值(Rvalues)
  C 中有两种类型的表达式
    左值:指向内存位置的表达式,又称左值表达式,既可在等号左边也可在右边
    右值:存储在内存中某些地址的数值,右值是不能对其进行赋值的表达式,只可在赋值号右边
  变量是左值,如 a = b , b = c; b 既可在左边也可以在右边
  数值型的字面值(常量)是右值 a = 1; 是没问题的,但 1 = 2; 是错误的

**********

C 常量
  常量又称字面量,在程序执行期间不会改变,定义后不可修改
  常量可以是任何的基本数据类型
  整数常量
    可以是八进制,十进制,十六进制的常量
      八进制:以 0 开头,eg:07
      十六进制:以 0x 或 0X 开头,eg:0XFF
    也可是无符号整数,长整数
      无符号:以 U 或 u 结尾,eg:10u
      长整数:以 L 或 l 结尾,eg:10L
      无符号长整形:将上述结合,顺序任意,eg:10Lu
  浮点常量
    由整数部分,小数点,小数部分和指数部分组成,可用小数形式或指数形式表示浮点常量
    小数形式
      必须包含整数和小数部分
    指数形式
      整数部分或小数部分必须包含其中之一以及指数部分
  字符常量
    字符常量在单引号中,以及转义字符
      转义序列   含义
      \\         \
      \a         警报铃声
      \b         退格键
      \f         换页符
      \n         换行符
      \r         回车(关于换行和回车后面单独描述)
      \t         水品制表符
      \v         垂直制表符
      \ooo       一到三位的八进制数
      \xhh..     一个或多个数字的十六进制数
  字符串常量
    字符串字面值或常量是括在双引号""中的
  定义常量
    有两种方式
      #define 预处理器
        #define AGE 25;
        #define LINE '\n';
      const 关键字
        const int VAR = 3; // 必须初始化

回车与换行
  符号   ASCII   意义
  \n     10      换行NL          
  \r     13      回车CF
  回车 \r 
    本意是光标重新回到本行开头
    r 的英文 return
    控制符可写成 CR ,即 Carriage Return
  换行 \n
    本意是光标往下移一行,并非是下一行行首
    n newLine
    控制符可以写成 LF ,即 Line Feed
  在不同操作系统这几个字符表现不同
  在 WIN 系统下,这两个字符就是表现的本意
  在 UNIX 系统下, \n 则表现为 光标向下移动一行并回到行首
  在 MAC 系统上, \r 表现为回到本行开头并向下移动一行
  至于 Enter 键的定义与操作系统有关,通常是将 \r \n 两者动作加起来
  起因
    在计算机未出现之前,有一种叫做电传打字机(Teletype Model 33)的打字机器
    它每秒可打印 10 个字符,若在换行的时候有字符传进来那么就有个能会将其丢失
    于是规定在每行后面中打开加两个表示结束的字符,即回车和换行
    后来发明了计算机,这两个概念也被运用上
    但那时存储器昂贵,部分认为两个字符过于浪费应只加一个即可
    于是产生分歧
      回车符号   系统
      \n         UNIX
      \n\r       WIN
      \r         MAC OS
    由于分歧, UNIX/MAC 的文件在 WIN 中打开会出现所有字符变成一行
    而 WIN 的文件在 UNIX/MAC 中打开会在每行结尾多出一个 ^M 符号
    所以在 WIN 系统中 C/C++ 的 \r 表示回到本行行首,故会把光标所在的当前行原有内容清除
      printf("1\r2");
      cout << "1\r2";
      // 输出:2

**********

C 存储类
  存储类定义 C 程序中变量或函数的范围(可见性)和生命周期
  这些说明符放置在它们所修饰的类型之前
    auto
    register
    static
    extern
  auto 存储类
    所有局部变量默认的存储类
      auto int age;
  register 存储类
    用于定义存储在寄存器中而不是 RAM 中的局部变量
    这意味着变量的最大尺寸等于寄存器的大小
    且不能对它应用一元的 & 运算符
      register int miles;
    寄存器只用于需要快速访问的变量,比如计数器
    此外,定义 register 并不意味着变量将被存储在寄存器中
    它意味着变量可能存储在寄存器中,这取决于硬件和实现的限制
  static 存储类
    指示编译器在程序的生命周期内保持局部变量的存在
    而不需要在每次它进入和离开时作用域时进行创建和销毁
    因此,使用 static 修饰局部变量可以在函数调用之间保持局部变量的值
    static 修饰符也可以应用于全局变量
    当修饰全局变量时,会使变量的作用域限制在声明它的文件内
    全局声明的一个 static 变量或方法可以被任何函数或方法调用
    只要这些方法出现在跟 static 变量或方法同一个文件中
  extern 存储类
    用于提供一个全局变量的引用,全局变量对所有的程序文件都是可见的
    当你使用 extern 时,对于无法初始化的变量会把变量名指向一个之前定义过的存储位置
    当你有多个文件且定义了一个可以在其它文件中使用的全局变量或函数时
    可以在其他文件中使用 extern 来得到已定义的变量或函数的引用
    可以这么理解, extern 是用来在另一个文件中声明一个全局变量或函数
    extern 通常应用于有两个或多个文件共享相同的全局变量或函数
